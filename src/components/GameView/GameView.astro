---
import WebContainerLoading from "../WebContainer/WebContainerLoading.astro";

export interface GameViewElement extends HTMLElement {
    _iframe: HTMLIFrameElement;
    runCode(code: string): void;
    run(): void;
    connect(url: string): void;
    get iframe(): HTMLIFrameElement | null;
}

import { $isEditor } from "../../stores/playground";
---

<game-view>
    {$isEditor.get() && <WebContainerLoading />}
    <iframe height="100%" width="100%" />
</game-view>

<script>
    import { $gameViewElement, $playgroundCode } from "../../stores/playground";
    import { wrapCode } from "./wrapCode";

    class GameViewElement extends HTMLElement {
        _iframe: HTMLIFrameElement;

        constructor() {
            super();

            const iframe = this.querySelector("iframe");

            if (!iframe) {
                throw new Error("iframe not found in game-view element");
            }

            this._iframe = iframe;
            $gameViewElement.set(this);
        }

        runCode(code: string) {
            this._iframe.srcdoc = wrapCode(code);
        }

        run() {
            this.runCode($playgroundCode.get());
        }

        /** Connect to a source */
        connect(url: string) {
            // remove srcdoc to allow the iframe to load the source
            // this doesn't remove the srcdoc, only sets it to an empty string
            this._iframe.srcdoc = "";
            this._iframe.toggleAttribute("srcdoc", false);
            this._iframe.src = url;
        }

        get iframe() {
            return this._iframe;
        }
    }

    customElements.define("game-view", GameViewElement);
</script>
