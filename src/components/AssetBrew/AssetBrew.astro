---
import AssetBrewItem from "./AssetBrewItem.astro";
import { assets } from "./assets";
---

<dialog id="assetbrew-modal" class="modal">
    <section class="modal-box flex flex-col gap-4">
        <label class="btn" id="assetbrew-upload">
            <input
                type="file"
                hidden
                id="assetbrew-fileinput"
            />
            <span>Upload</span>
        </label>
        <div
            class="assets | flex flex-wrap gap-4 max-h-96 overflow-y-auto items-center justify-start"
        >
            {assets.map((asset) => <AssetBrewItem {asset} />)}
        </div>
    </section>

    <form method="dialog" class="modal-backdrop">
        <button>close</button>
    </form>
</dialog>

<script>
    import { $editorInstance } from "../../stores/playground";
    import { getImportStatement, typeByExtension } from "./assetBrew";

    const assets = document.querySelectorAll<HTMLElement>(".asset");
    const assetbrewModal = document.querySelector<HTMLDialogElement>(
        "#assetbrew-modal",
    );
    const assetbrewFileInput = document.querySelector<HTMLInputElement>(
        "#assetbrew-fileinput",
    );

    assetbrewFileInput?.addEventListener("change", (event) => {
        const file = (event.target as HTMLInputElement).files?.[0];
        const reader = new FileReader();

        const type = file?.type.split("/")[1];
        const name = file?.name.split(".")[0];

        if (!type) return alert("Invalid file type");

        reader.onload = (event) => {
            const data = event.target?.result as string;
            $editorInstance.get()?.executeEdits("", [
                {
                    range: $editorInstance.get()?.getSelection()!,
                    text: getImportStatement({
                        name: name ?? "asset",
                        type: typeByExtension(type!) ?? "sprite",
                        url: data,
                    }),
                    forceMoveMarkers: true,
                },
            ]);
        };

        reader.readAsDataURL(file!);
        assetbrewModal?.close();
    });

    assets.forEach((asset) => {
        asset.addEventListener("click", () => {
            assetbrewModal?.close();

            $editorInstance.get()?.executeEdits("", [
                {
                    range: $editorInstance.get()?.getSelection()!,
                    text: asset.dataset.import ?? "",
                    forceMoveMarkers: true,
                },
            ]);
        });
    });
</script>
